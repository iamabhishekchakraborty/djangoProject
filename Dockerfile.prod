# Docker multi-stage build
# essentially builder is a temporary image that's used for building python wheels
# and then copied over to final production image and the builder image is discarded
###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.6-alpine as builder
LABEL maintainer="abhishek"

# set environment variables
# Prevents Python from buffering stdout and stderr but send it to terminal
ENV PYTHONUNBUFFERED=1
# Prevents Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE=1

# create root directory and copy project
# RUN mkdir /app
# set work directory
WORKDIR /usr/src/app

# install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev

# lint
RUN pip install --upgrade pip
RUN pip install flake8==3.9.2
COPY . .
RUN flake8 --ignore=E501,F401 ./djangoproject

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

###########
# FINAL   #
###########

# pull official base image
FROM python:3.8.6-alpine

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
# Docker runs container processes as root inside container which is a bad practice (if you are root in the container you will be root in the host)
RUN addgroup -S app && adduser -S app -G app

# create the directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g' $APP_HOME/entrypoint.prod.sh
RUN chmod +x $APP_HOME/entrypoint.prod.sh

# copy project and change ownership to app user
COPY . $APP_HOME
RUN chown -R app:app $APP_HOME

# run as non-root user
USER app

# run entrypoint.sh script
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]